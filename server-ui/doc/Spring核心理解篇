Ioc含义理解
    Inversion of Control，即“控制反转”，不是什么技术，而是一种设计思想。
    将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制
    spring来负责控制对象的生命周期和对象间的关系

谁控制谁，控制什么
    传统Java SE程序设计，我们直接在对象内部通过new进行创建对象，是程序主动去创建依赖对象；
    而IoC是有专门一个容器来创建这些对象，即由Ioc容器来控制对 象的创建

为何是反转，哪些方面反转了
    有反转就有正转，传统应用程序是由我们自己在对象中主动控制去直接获取依赖对象，也就是正转；而反转则是由容器来帮忙创建及注入依赖对象（DI）
    因为由容器帮我们查找及注入依赖对象，对象只是被动的接受依赖对象，所以是反转

重大观点
    IoC对编程带来的最大改变不是从代码上，而是从思想上，发生了“主从换位”的变化。
    应用程序原本是老大，要获取什么资源都是主动出击，但是在IoC/DI思想中，应用程序就变成被动的了，被动的等待IoC容器来创建并注入它所需要的资源了
    IoC很好的体现了面向对象设计法则之一—— 好莱坞法则：“别找我们，我们找你”；即由IoC容器帮对象找相应的依赖对象并注入，而不是由对象主动去找

DI—Dependency Injection，即“依赖注入”
    组件之间依赖关系由容器在运行期决定；理解DI的关键是：“谁依赖谁，为什么需要依赖，谁注入谁，注入了什么”
    谁依赖于谁：当然是应用程序依赖于IoC容器；
    为什么需要依赖：应用程序需要IoC容器来提供对象需要的外部资源
    谁注入谁：很明显是IoC容器注入应用程序某个对象，应用程序依赖的对象
    注入了什么：就是注入某个对象所需要的外部资源（包括对象、资源、常量数据）


